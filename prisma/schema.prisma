// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StationType {
  Fixed
  Mobile
}

model Station {
  id              String  @id @default(cuid())
  name            String
  type            StationType
  latitude        Float?
  longitude       Float?
  description     String?
  image_url       String?
  sensors         Sensor[]   // Define a relation to Sensor
  created_at      DateTime?   @default(now())
  updated_at      DateTime?   @updatedAt
  deleted_at      DateTime?
  deleted         Boolean     @default(false)

  @@map("stations")
}

enum SensorType {
  LittObs
  SensOcean
}

model Sensor {
  id                 String  @id @default(cuid())
  identifier      String      @unique
  type            SensorType
  nbr_measures    Int?
  station_id      String?
  records         Record[]    // Add a one-to-many relationship to Record
  files           File[]      // Add a one-to-many relationship to File
  created_at      DateTime?   @default(now())
  updated_at      DateTime?   @updatedAt
  deleted_at      DateTime?
  deleted         Boolean     @default(false)

  station         Station?    @relation(fields: [station_id], references: [id])

  @@map("sensors")
}



model Record {
  id                  String  @id @default(cuid())
  latitude            Float?
  longitude           Float?
  recorded_at         DateTime
  properties          Json? // Can contain battery_voltage, battery_percentage, pression_ext, temp_ext, temp_int, temp_sea, temp_sea_mean, ec_sea, ec_sea_mean
  sensor_id           String?
  created_at          DateTime?   @default(now())
  updated_at          DateTime?   @updatedAt
  deleted_at          DateTime?

  sensor              Sensor?     @relation(fields: [sensor_id], references: [id])

  @@unique([recorded_at, sensor_id])
  @@map("records")
}

model File {
  id                 String  @id @default(cuid())
  name            String?
  status          String?
  file_url        String?
  sensor_id       String?
  created_at      DateTime?   @default(now())
  updated_at      DateTime?   @updatedAt
  deleted_at      DateTime?

  sensor          Sensor?     @relation(fields: [sensor_id], references: [id])

  @@map("files")
}

model Organisation {
  id            String  @id @default(cuid())
  name          String?
  description   String
  users         User[]    // Add a one-to-many relationship to User

  @@map("organisations")
}

model Account {
  id                String @id @default(cuid())
  userId            String @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  emailVerified   DateTime?     @map("email_verified")
  password        String?
  avatar_url      String?
  accounts        Account[]
  sessions        Session[]
  organisation_id String?

  organisation    Organisation? @relation(fields: [organisation_id], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
