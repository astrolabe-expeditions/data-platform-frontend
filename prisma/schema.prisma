// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum StationType {
  Fixed
  Mobile
}


model Station {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  type            StationType
  latitude        Float?
  longitude       Float?
  description     String?
  image_url       String?
  sensors         Sensor[]   // Define a relation to Sensor
  created_at      DateTime?   @default(now())
  created_by_id   String?     @db.ObjectId
  created_by      User?       @relation("createdStations", fields: [created_by_id], references: [id])
  updated_at      DateTime?   @updatedAt
  updated_by_id   String?     @db.ObjectId
  updated_by      User?       @relation("updatedStations", fields: [updated_by_id], references: [id])
  deleted_at      DateTime?
  deleted_by_id   String?     @db.ObjectId
  deleted_by      User?       @relation("deletedStations", fields: [deleted_by_id], references: [id])
  deleted         Boolean     @default(false)

  @@map("stations")
}

enum SensorType {
  LittObs
  SensOcean
}

model Sensor {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  identifier      String      @unique
  type            SensorType
  nbr_measures    Int?
  station_id      String?     @db.ObjectId // Add a reference to the Station model
  station         Station?    @relation(fields: [station_id], references: [id])
  records         Record[]    // Add a one-to-many relationship to Record
  files           File[]      // Add a one-to-many relationship to File
  created_at      DateTime?   @default(now())
  created_by_id   String?     @db.ObjectId
  created_by      User?       @relation("createdSensors", fields: [created_by_id], references: [id])
  updated_at      DateTime?   @updatedAt
  updated_by_id   String?     @db.ObjectId
  updated_by      User?       @relation("updatedSensors", fields: [updated_by_id], references: [id])
  deleted_at      DateTime?
  deleted_by_id   String?     @db.ObjectId
  deleted_by      User?       @relation("deletedSensors", fields: [deleted_by_id], references: [id])
  deleted         Boolean     @default(false)

  @@map("sensors")
}

model Record {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  latitude            Float
  longitude           Float
  recorded_at         DateTime    @default(now())
  battery_voltage     Float
  battery_percentage  Float
  pression_ext        Float
  temp_ext            Float
  temp_int            Float
  temp_sea            Float[]
  temp_sea_mean       Float
  ec_sea              Float[]
  ec_sea_mean         Float
  sensor_id           String?     @db.ObjectId  // Reference to Sensor model
  sensor              Sensor?     @relation(fields: [sensor_id], references: [id])
  created_at          DateTime?   @default(now())
  created_by_id       String?     @db.ObjectId
  created_by          User?       @relation("createdRecords", fields: [created_by_id], references: [id])
  updated_at          DateTime?   @updatedAt
  updated_by_id       String?     @db.ObjectId
  updated_by          User?       @relation("updatedRecords", fields: [updated_by_id], references: [id])
  deleted_at          DateTime?
  deleted_by_id       String?     @db.ObjectId
  deleted_by          User?       @relation("deletedRecords", fields: [deleted_by_id], references: [id])

  @@map("records")
}

model File {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  status          String?
  file_url        String?
  sensor_id       String?     @db.ObjectId  // Reference to Sensor model
  sensor          Sensor?     @relation(fields: [sensor_id], references: [id])
  created_at      DateTime?   @default(now())
  created_by_id   String?     @db.ObjectId
  created_by      User?       @relation("createdFiles", fields: [created_by_id], references: [id])
  updated_at      DateTime?   @updatedAt
  updated_by_id   String?     @db.ObjectId
  updated_by      User?       @relation("updatedFiles", fields: [updated_by_id], references: [id])
  deleted_at      DateTime?
  deleted_by_id   String?     @db.ObjectId
  deleted_by      User?       @relation("deletedFiles", fields: [deleted_by_id], references: [id])

  @@map("files")
}

model Organisation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String
  users         User[]    // Add a one-to-many relationship to User

  @@map("organisations")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String          @unique
  emailVerified     DateTime?       @map("email_verified")
  password          String?
  avatar_url        String?
  accounts          Account[]
  sessions          Session[]
  organisation_id   String?         @db.ObjectId
  organisation      Organisation?   @relation(fields: [organisation_id], references: [id])
  created_stations  Station[]       @relation("createdStations") // Stations created by this user
  updated_stations  Station[]       @relation("updatedStations") // Stations updated by this user
  deleted_stations  Station[]       @relation("deletedStations") // Stations deleted by this user
  created_sensors   Sensor[]        @relation("createdSensors") // Sensors created by this user
  updated_sensors   Sensor[]        @relation("updatedSensors") // Sensors updated by this user
  deleted_sensors   Sensor[]        @relation("deletedSensors") // Sensors deleted by this user
  created_records   Record[]        @relation("createdRecords") // Records created by this user
  updated_records   Record[]        @relation("updatedRecords") // Records updated by this user
  deleted_records   Record[]        @relation("deletedRecords") // Records deleted by this user
  created_files     File[]          @relation("createdFiles") // Files created by this user
  updated_files     File[]          @relation("updatedFiles") // Files updated by this user
  deleted_files     File[]          @relation("deletedFiles") // Files deleted by this user

  @@map("users")
}



model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

